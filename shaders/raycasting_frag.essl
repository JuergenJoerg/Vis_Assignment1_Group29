/*
* Vis 1 Task 1 Framework
* Copyright (C) TU Wien
*   Institute of Visual Computing and Human-Centered Technology
*   Research Unit of Computer Graphics
* Maintenance:
*   2021: Manuela Waldner
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are not permitted.
* 
* Sets one of two colors for a fragment, depending on colorIdx. 
*/
#ifndef GL_ES
#version 330 es
#endif

precision highp int;
precision highp float;
precision highp sampler3D;

uniform vec3 boxMin;
uniform vec3 boxMax;
uniform sampler3D volume;

//TODO: make uniforms
uniform float planeRotX;
uniform float planeRotY;
uniform vec3 planePos;    // xyz translation
uniform bool renderAbovePlane;

uniform float isovalue;
uniform bool useIsosurface;

vec3 planeNormal;
vec3 planePoint;

in vec3 vPositionWS;
out vec4 fragColor;

struct Ray {
    vec3 origin;
    vec3 direction;
    vec3 invDirection;
};

struct Box {
    vec3 min;
    vec3 max;
};

struct BoxIntersection {
    bool hit;
    float tEntry;
    float tExit;
};

Ray initRay(vec3 fragPos) {
    Ray ray;
    ray.origin = cameraPosition;
    ray.direction = normalize(fragPos - cameraPosition);
    ray.invDirection = 1.0 / ray.direction;
    return ray;
}

BoxIntersection intersectBox(Box box, Ray ray) {
    vec3 t1 = (box.min - ray.origin) * ray.invDirection;
    vec3 t2 = (box.max - ray.origin) * ray.invDirection;
    vec3 tMin = min(t1, t2);
    vec3 tMax = max(t1, t2);
    float tEntry = max(max(tMin.x, tMin.y), tMin.z);
    float tExit  = min(min(tMax.x, tMax.y), tMax.z);

    BoxIntersection result;
    result.hit = (tExit > max(tEntry, 0.0));
    result.tEntry = max(tEntry, 0.0);
    result.tExit = tExit;
    return result;
}

// Ray-plane intersection
bool intersectPlane(vec3 origin, vec3 dir, out float t) {
    float denom = dot(planeNormal, dir);
    if (abs(denom) < 1e-6) return false;
    t = dot(planePoint - origin, planeNormal) / denom;
    return true;
}

float signedDistanceToPlane(vec3 point) {
    return dot(planeNormal, point - planePoint);
}

// Calculate gradient at a given position using central differences
vec3 calculateGradient(vec3 pos) {
    float epsilon = 0.005;
    
    vec3 clampedPos = clamp(pos, vec3(epsilon), vec3(1.0 - epsilon));
    
    vec3 gradient;
    
    if (clampedPos.x + epsilon <= 1.0 && clampedPos.x - epsilon >= 0.0) {
        gradient.x = 0.5 * (texture(volume, clampedPos - vec3(epsilon, 0.0, 0.0)).r - 
                           texture(volume, clampedPos + vec3(epsilon, 0.0, 0.0)).r);
    } else {
        float step = clampedPos.x + epsilon > 1.0 ? -epsilon : epsilon;
        gradient.x = (texture(volume, clampedPos).r - 
                     texture(volume, clampedPos + vec3(step, 0.0, 0.0)).r) / step;
    }
    
    if (clampedPos.y + epsilon <= 1.0 && clampedPos.y - epsilon >= 0.0) {
        gradient.y = 0.5 * (texture(volume, clampedPos - vec3(0.0, epsilon, 0.0)).r - 
                           texture(volume, clampedPos + vec3(0.0, epsilon, 0.0)).r);
    } else {
        float step = clampedPos.y + epsilon > 1.0 ? -epsilon : epsilon;
        gradient.y = (texture(volume, clampedPos).r - 
                     texture(volume, clampedPos + vec3(0.0, step, 0.0)).r) / step;
    }
    
    if (clampedPos.z + epsilon <= 1.0 && clampedPos.z - epsilon >= 0.0) {
        gradient.z = 0.5 * (texture(volume, clampedPos - vec3(0.0, 0.0, epsilon)).r - 
                           texture(volume, clampedPos + vec3(0.0, 0.0, epsilon)).r);
    } else {
        float step = clampedPos.z + epsilon > 1.0 ? -epsilon : epsilon;
        gradient.z = (texture(volume, clampedPos).r - 
                     texture(volume, clampedPos + vec3(0.0, 0.0, step)).r) / step;
    }
    
    return length(gradient) > 0.001 ? normalize(gradient) : vec3(0.0, 0.0, 1.0);
}

vec3 calculatePhongShading(vec3 normal, vec3 position, vec3 viewDir) {
    vec3 lightDirection = vec3(-1.0, 1.0, 1.0);
    vec3 lightColor = vec3(1.0, 1.0, 1.0);
    vec3 ambientColor = vec3(0.2, 0.2, 0.2);
    vec3 diffuseColor = vec3(0.8, 0.6, 0.4);
    vec3 specularColor = vec3(1.0, 1.0, 1.0);
    float shininess = 32.0;
    
    vec3 N = normalize(normal);
    vec3 L = normalize(-lightDirection);
    vec3 V = normalize(viewDir);
    
    vec3 ambient = ambientColor;
    
    float lambertian = max(dot(N, L), 0.0);
    vec3 diffuse = lambertian * diffuseColor * lightColor;
    
    vec3 specular = vec3(0.0);
    if (lambertian > 0.0) {
        vec3 R = reflect(-L, N);
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, shininess) * specularColor * lightColor;
    }
    
    return ambient + diffuse + specular;
}

vec4 calcFragColor(vec3 start, vec3 end) {
    float stepSize = 0.0025;
    vec3 rayDir = normalize(end - start);
    float rayLength = length(end - start);
    
    vec3 pos = start;
    float distance = 0.0;
    
    if (useIsosurface) {
        while (distance < rayLength) {
            float intensity = texture(volume, pos).r;
            
            if (intensity >= isovalue) {
                vec3 hitNormal = calculateGradient(pos);
                vec3 worldPos = pos * (boxMax - boxMin) + boxMin;
                vec3 viewDir = normalize(cameraPosition - worldPos);
                
                vec3 color = calculatePhongShading(hitNormal, worldPos, viewDir);
                return vec4(color, 1.0);
            }
            
            pos += rayDir * stepSize;
            distance += stepSize;
        }
        
        discard;
    } else {
        float maxIntensity = 0.0;

        while (distance < rayLength) {
            float intensity = texture(volume, pos).r;
            maxIntensity = max(maxIntensity, intensity);
            pos += rayDir * stepSize;
            distance += stepSize;
        }

        return vec4(vec3(maxIntensity), 1.0);
    }
}

vec3 computePlaneNormal(float rotX, float rotY) {
    // Start with base normal facing +Z
    vec3 n = vec3(0.0, 0.0, 1.0);

    // Rotation around X (pitch)
    float cosX = cos(rotX);
    float sinX = sin(rotX);
    n = vec3(n.x, n.y * cosX - n.z * sinX, n.y * sinX + n.z * cosX);

    // Rotation around Y (yaw)
    float cosY = cos(rotY);
    float sinY = sin(rotY);
    n = vec3(n.x * cosY + n.z * sinY, n.y, -n.x * sinY + n.z * cosY);

    return normalize(n);
}

void main() {
    planeNormal = computePlaneNormal(planeRotX, planeRotY);
    planePoint = planePos;

    Ray ray = initRay(vPositionWS);
    Box box = Box(boxMin, boxMax);
    BoxIntersection hit = intersectBox(box, ray);

    if (!hit.hit) {
        discard;
    }

    float t0 = hit.tEntry;
    float t1 = hit.tExit;

    vec3 entryWS = ray.origin + ray.direction * t0;
    vec3 exitWS  = ray.origin + ray.direction * t1;

    float dEntry = signedDistanceToPlane(entryWS);
    float dExit  = signedDistanceToPlane(exitWS);

    // Discard if plane cuts off
    if (!renderAbovePlane) {
        if (dEntry < 0.0 && dExit < 0.0) {
            discard;
        }
    } else {
        if (dEntry > 0.0 && dExit > 0.0) {
            discard;
        }
    }

    //  Clip part of the ray above/below the plane
    float tPlane;
    if (intersectPlane(ray.origin, ray.direction, tPlane)) {
        vec3 hitPoint = ray.origin + ray.direction * tPlane;

        if (!renderAbovePlane) {
            if (dEntry < 0.0 && tPlane >= t0 && tPlane <= t1) {
                entryWS = hitPoint;
            }
            if (dExit < 0.0 && tPlane >= t0 && tPlane <= t1) {
                exitWS = hitPoint;
            }
        } else {
            if (dEntry > 0.0 && tPlane >= t0 && tPlane <= t1) {
                entryWS = hitPoint;
            }
            if (dExit > 0.0 && tPlane >= t0 && tPlane <= t1) {
                exitWS = hitPoint;
            }
        }
    }

    if (length(exitWS - entryWS) < 1e-5) {
        discard;
    }

    vec3 texEntry = (entryWS - boxMin) / (boxMax - boxMin);
    vec3 texExit  = (exitWS - boxMin) / (boxMax - boxMin);

    fragColor = calcFragColor(texEntry, texExit);
}